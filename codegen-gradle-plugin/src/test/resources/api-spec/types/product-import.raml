#%RAML 1.0 Library
usage: Product import types.
(generator.package): products

uses:
  common: common.raml
  generator: ../annotationTypes/generator.raml

types:
  SearchKeywords:
    properties:
        /^[a-z]{2}(-[A-Z]{2})?$/:
            type: SearchKeyword[]
  SearchKeyword:
    properties:
        text:
            type: string
        suggestTokenizer?:
            type: SuggestTokenizer

  SuggestTokenizer:
    discriminator: type
    properties:
        type:
            type: string
  CustomTokenizer:
    type: SuggestTokenizer
    discriminatorValue: custom
    properties:
        inputs:
            type: string[]
  WhitespaceTokenizer:
    type: SuggestTokenizer
    discriminatorValue: whitespace

  ProductImport:
    type: common.ImportResource
    description: |
      For now we just import the attributes that are required by the CTP product draft.
      Later we will add more attributes, but overall the goal is to create a separate
      product data model targeting the special needs of an import client.
    properties:
      name:
        description: The human readable name of the product.
        type: common.LocalizedString
      productType:
        (common.ReferenceType): product-type
        type: common.ImportReference

      slug:
        description: |
          Human-readable identifiers usually used as deep-link URL to the related product. Each slug must be unique across a project,
          but a product can have the same slug for different languages. Allowed are alphabetic, numeric, underscore (_) and hyphen (-) characters.
        type: common.LocalizedString

      categories?:
        (common.ReferenceType): category
        type: common.ImportReference[]
      metaTitle?:
        type: common.LocalizedString
      metaDescription?:
        type: common.LocalizedString
      metaKeywords?:
        type: common.LocalizedString
      taxCategory?:
        (common.ReferenceType): tax-category
        type: common.ImportReference
      searchKeywords?:
        type: SearchKeywords
      state?:
        (common.ReferenceType): state
        type: common.ImportReference
